{"version":3,"sources":["PinBoxes.jsx","App.js","serviceWorker.js","index.js"],"names":["PinBoxes","props","handleChange","e","i","values","target","value","length","digit","elements","focus","backSpace","index","keyCode","handlePaste","preventDefault","val","clipboardData","getData","split","filter","_","arr","tem","j","push","shift","join","forEach","Array","fill","this","valu","onPaste","map","item","style","width","padding","margin","onChange","key","ref","element","maxLength","onKeyDown","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAoFeA,E,kDAjFd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IASPC,aAAe,SAACC,EAAGC,GAClB,EAAKC,OAAOD,GAAKD,EAAEG,OAAOC,MAEzBH,EAAI,EAAKH,MAAMO,OAAS,GACxB,EAAKH,OAAOD,GAAGI,QACf,EAAKH,OAAOD,GAAGI,SAAW,EAAKP,MAAMQ,MAAQ,EAAKR,MAAMO,QAExD,EAAKE,SAASN,EAAI,GAAGO,SAjBJ,EAqBnBC,UAAY,SAACC,EAAOV,GACfU,EAAQ,GAAmB,IAAdV,EAAEW,UAAkB,EAAKT,OAAOQ,IAChD,EAAKH,SAASG,EAAQ,GAAGF,QAER,KAAdR,EAAEW,SAAkBD,EAAQ,EAAKZ,MAAMO,OAAS,GACnD,EAAKE,SAASG,EAAQ,GAAGF,QAER,KAAdR,EAAEW,SAAkBD,EAAQ,GAC/B,EAAKH,SAASG,EAAQ,GAAGF,SA7BR,EAiCnBI,YAAc,SAAAZ,GACbA,EAAEa,iBAMF,IALA,IAAIC,EAAMd,EAAEe,cACVC,QAAQ,QACRC,MAAM,IACNC,QAAO,SAACC,EAAGlB,GAAJ,OAAUA,GAAK,EAAKH,MAAMQ,SAC/Bc,EAAM,GACDnB,EAAI,EAAGA,EAAI,EAAKH,MAAMO,OAAQJ,IAAK,CAE3C,IADA,IAAIoB,EAAM,GACDC,EAAI,EAAGA,EAAI,EAAKxB,MAAMQ,MAAQ,EAAKR,MAAMO,OAAQiB,IACzDD,EAAIE,KAAKT,EAAIU,SAEdJ,EAAIG,KAAKF,EAAII,KAAK,KAGnBL,EAAIM,SAAQ,SAACtB,EAAOH,GACnB,EAAKC,OAAOD,GAAKG,EACjB,EAAKG,SAASN,GAAGG,MAAQA,EAExBH,EAAI,EAAKH,MAAMO,OAAS,GACxB,EAAKE,SAASN,GAAGG,MAAMC,SAAW,EAAKP,MAAMO,QAE7C,EAAKE,SAASN,EAAI,GAAGO,YArDvB,EAAKN,OAAS,IAAIyB,MAAM,EAAK7B,MAAMO,QAAQuB,KAAK,IAChD,EAAKrB,SAAW,GAHE,E,gEAOlBsB,KAAKtB,SAAS,GAAGC,U,+BAqDR,IAAD,OACFsB,EAAOD,KAAK/B,MAAMQ,MAAQuB,KAAK/B,MAAMO,OAC3C,OACC,yBAAK0B,QAASF,KAAKjB,aACjBiB,KAAK3B,OAAO8B,KAAI,SAACC,EAAMhC,GACvB,OACC,2BACCiC,MAAO,CAAEC,MAAO,GAAIC,QAAS,GAAIC,OAAQ,IACzCC,SAAU,SAAAtC,GAAC,OAAI,EAAKD,aAAaC,EAAGC,IACpCsC,IAAKtC,EACLuC,IAAK,SAAAC,GAAO,OAAK,EAAKlC,SAASN,GAAKwC,GACpCC,UAAWZ,EACXa,UAAW,SAAA3C,GAAC,OAAI,EAAKS,UAAUR,EAAGD,c,GAzElB4C,IAAMC,WCWdC,MATf,WACE,OACE,yBAAKC,UAAU,OACb,8CACA,kBAAC,EAAD,CAAU1C,OAAQ,EAAGC,MAAO,OCId0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f7693074.chunk.js","sourcesContent":["import React from 'react';\n\nclass PinBoxes extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.values = new Array(this.props.length).fill('');\n\t\tthis.elements = [];\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.elements[0].focus();\n\t}\n\n\thandleChange = (e, i) => {\n\t\tthis.values[i] = e.target.value;\n\t\tif (\n\t\t\ti < this.props.length - 1 &&\n\t\t\tthis.values[i].length &&\n\t\t\tthis.values[i].length === this.props.digit / this.props.length\n\t\t) {\n\t\t\tthis.elements[i + 1].focus();\n\t\t}\n\t};\n\n\tbackSpace = (index, e) => {\n\t\tif (index > 0 && e.keyCode === 8 && !this.values[index]) {\n\t\t\tthis.elements[index - 1].focus();\n\t\t}\n\t\tif (e.keyCode === 39 && index < this.props.length - 1) {\n\t\t\tthis.elements[index + 1].focus();\n\t\t}\n\t\tif (e.keyCode === 37 && index > 0) {\n\t\t\tthis.elements[index - 1].focus();\n\t\t}\n\t};\n\n\thandlePaste = e => {\n\t\te.preventDefault();\n\t\tlet val = e.clipboardData\n\t\t\t.getData('Text')\n\t\t\t.split('')\n\t\t\t.filter((_, i) => i <= this.props.digit);\n\t\tlet arr = [];\n\t\tfor (let i = 0; i < this.props.length; i++) {\n\t\t\tvar tem = [];\n\t\t\tfor (let j = 0; j < this.props.digit / this.props.length; j++) {\n\t\t\t\ttem.push(val.shift());\n\t\t\t}\n\t\t\tarr.push(tem.join(''));\n\t\t}\n\n\t\tarr.forEach((value, i) => {\n\t\t\tthis.values[i] = value;\n\t\t\tthis.elements[i].value = value;\n\t\t\tif (\n\t\t\t\ti < this.props.length - 1 &&\n\t\t\t\tthis.elements[i].value.length === this.props.length\n\t\t\t) {\n\t\t\t\tthis.elements[i + 1].focus();\n\t\t\t}\n\t\t});\n\t};\n\n\trender() {\n\t\tconst valu = this.props.digit / this.props.length;\n\t\treturn (\n\t\t\t<div onPaste={this.handlePaste}>\n\t\t\t\t{this.values.map((item, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tstyle={{ width: 50, padding: 10, margin: 10 }}\n\t\t\t\t\t\t\tonChange={e => this.handleChange(e, i)}\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\tref={element => (this.elements[i] = element)}\n\t\t\t\t\t\t\tmaxLength={valu}\n\t\t\t\t\t\t\tonKeyDown={e => this.backSpace(i, e)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default PinBoxes;\n","import React from 'react';\nimport './App.css';\nimport PinBoxes from './PinBoxes';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Card Number* :</h1>\n      <PinBoxes length={4} digit={16} />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}